<?xml version="1.0" standalone="yes"?>
<library-reference><header name="boost/histogram.hpp">
<para>Includes all standard headers of the Boost.histogram library. </para><para>The library consists of two histogram implementations, a static and a dynamic one. If you need to configure histograms at runtime, choose the dynamic one, otherwise use the static one. The static one is faster, and a little more convenient, since some errors can be caught at compile time and you don't need to worry about type conversions.</para><para>You can freely mix the implementations in your code, they are convertible into each other, and there is a common interface for both. To the extend of what is technically possible, the library has been designed to allow you to write code that is agnostic of the implementation variant. </para></header>
<header name="boost/histogram/histogram.hpp">
</header>
<header name="boost/histogram/arithmetic_operators.hpp">
<namespace name="boost">
<namespace name="histogram">
<function name="operator+"><type>H&lt; A, S &gt; &amp;&amp;</type><template>
          <template-nontype-parameter name="H"><type>template&lt; class, class &gt; class</type></template-nontype-parameter>
          <template-type-parameter name="A"/>
          <template-type-parameter name="S"/>
        </template><parameter name="a"><paramtype>H&lt; A, S &gt; &amp;&amp;</paramtype></parameter><parameter name="b"><paramtype>const H&lt; A, S &gt; &amp;</paramtype></parameter></function>
<function name="operator+"><type>H&lt; A, S &gt; &amp;&amp;</type><template>
          <template-nontype-parameter name="H"><type>template&lt; class, class &gt; class</type></template-nontype-parameter>
          <template-type-parameter name="A"/>
          <template-type-parameter name="S"/>
        </template><parameter name="a"><paramtype>H&lt; A, S &gt; &amp;&amp;</paramtype></parameter><parameter name="b"><paramtype>H&lt; A, S &gt; &amp;&amp;</paramtype></parameter></function>
<function name="operator+"><type>H&lt; A, S &gt; &amp;&amp;</type><template>
          <template-nontype-parameter name="H"><type>template&lt; class, class &gt; class</type></template-nontype-parameter>
          <template-type-parameter name="A"/>
          <template-type-parameter name="S"/>
        </template><parameter name="a"><paramtype>const H&lt; A, S &gt; &amp;</paramtype></parameter><parameter name="b"><paramtype>H&lt; A, S &gt; &amp;&amp;</paramtype></parameter></function>
<function name="operator+"><type>H&lt; A, S &gt;</type><template>
          <template-nontype-parameter name="H"><type>template&lt; class, class &gt; class</type></template-nontype-parameter>
          <template-type-parameter name="A"/>
          <template-type-parameter name="S"/>
        </template><parameter name="a"><paramtype>const H&lt; A, S &gt; &amp;</paramtype></parameter><parameter name="b"><paramtype>const H&lt; A, S &gt; &amp;</paramtype></parameter></function>
<function name="operator*"><type>H&lt; A, S &gt; &amp;&amp;</type><template>
          <template-nontype-parameter name="H"><type>template&lt; class, class &gt; class</type></template-nontype-parameter>
          <template-type-parameter name="A"/>
          <template-type-parameter name="S"/>
        </template><parameter name="a"><paramtype>H&lt; A, S &gt; &amp;&amp;</paramtype></parameter><parameter name="x"><paramtype>const double</paramtype></parameter></function>
<function name="operator*"><type>H&lt; A, S &gt; &amp;&amp;</type><template>
          <template-nontype-parameter name="H"><type>template&lt; class, class &gt; class</type></template-nontype-parameter>
          <template-type-parameter name="A"/>
          <template-type-parameter name="S"/>
        </template><parameter name="x"><paramtype>const double</paramtype></parameter><parameter name="b"><paramtype>H&lt; A, S &gt; &amp;&amp;</paramtype></parameter></function>
<function name="operator*"><type>H&lt; A, S &gt;</type><template>
          <template-nontype-parameter name="H"><type>template&lt; class, class &gt; class</type></template-nontype-parameter>
          <template-type-parameter name="A"/>
          <template-type-parameter name="S"/>
        </template><parameter name="a"><paramtype>const H&lt; A, S &gt; &amp;</paramtype></parameter><parameter name="x"><paramtype>const double</paramtype></parameter></function>
<function name="operator*"><type>H&lt; A, S &gt;</type><template>
          <template-nontype-parameter name="H"><type>template&lt; class, class &gt; class</type></template-nontype-parameter>
          <template-type-parameter name="A"/>
          <template-type-parameter name="S"/>
        </template><parameter name="x"><paramtype>const double</paramtype></parameter><parameter name="b"><paramtype>const H&lt; A, S &gt; &amp;</paramtype></parameter></function>
<function name="operator/"><type>H&lt; A, S &gt; &amp;&amp;</type><template>
          <template-nontype-parameter name="H"><type>template&lt; class, class &gt; class</type></template-nontype-parameter>
          <template-type-parameter name="A"/>
          <template-type-parameter name="S"/>
        </template><parameter name="a"><paramtype>H&lt; A, S &gt; &amp;&amp;</paramtype></parameter><parameter name="x"><paramtype>const double</paramtype></parameter></function>
<function name="operator/"><type>H&lt; A, S &gt;</type><template>
          <template-nontype-parameter name="H"><type>template&lt; class, class &gt; class</type></template-nontype-parameter>
          <template-type-parameter name="A"/>
          <template-type-parameter name="S"/>
        </template><parameter name="a"><paramtype>const H&lt; A, S &gt; &amp;</paramtype></parameter><parameter name="x"><paramtype>const double</paramtype></parameter></function>










</namespace>
</namespace>
</header>
<header name="boost/histogram/axis/any.hpp">
<namespace name="boost">
<namespace name="histogram">
<namespace name="axis">
<function name="cast"><type>std::add_lvalue_reference&lt; T &gt;::type</type><template>
          <template-type-parameter name="T"/>
          <template-type-parameter name="Axes"/>
        </template><parameter name="any"><paramtype><classname>any</classname>&lt; Axes &gt; &amp;</paramtype></parameter></function>
<function name="cast"><type>const std::add_lvalue_reference&lt; T &gt;::type</type><template>
          <template-type-parameter name="T"/>
          <template-type-parameter name="Axes"/>
        </template><parameter name="any"><paramtype>const <classname>any</classname>&lt; Axes &gt; &amp;</paramtype></parameter></function>
<function name="cast"><type>std::add_pointer&lt; T &gt;::type</type><template>
          <template-type-parameter name="T"/>
          <template-type-parameter name="Axes"/>
        </template><parameter name="any"><paramtype><classname>any</classname>&lt; Axes &gt; *</paramtype></parameter></function>
<function name="cast"><type>const std::add_pointer&lt; T &gt;::type</type><template>
          <template-type-parameter name="T"/>
          <template-type-parameter name="Axes"/>
        </template><parameter name="any"><paramtype>const <classname>any</classname>&lt; Axes &gt; *</paramtype></parameter></function>
<function name="cast"><type>std::add_lvalue_reference&lt; T &gt;::type</type><template>
          <template-type-parameter name="T"/>
        </template><parameter name="t"><paramtype>T &amp;</paramtype></parameter></function>
<function name="cast"><type>const std::add_lvalue_reference&lt; T &gt;::type</type><template>
          <template-type-parameter name="T"/>
        </template><parameter name="t"><paramtype>const T &amp;</paramtype></parameter></function>
<function name="cast"><type>std::add_pointer&lt; T &gt;::type</type><template>
          <template-type-parameter name="T"/>
        </template><parameter name="t"><paramtype>T *</paramtype></parameter></function>
<function name="cast"><type>const std::add_pointer&lt; T &gt;::type</type><template>
          <template-type-parameter name="T"/>
        </template><parameter name="t"><paramtype>const T *</paramtype></parameter></function>







</namespace>




















</namespace>
<namespace name="serialization">
</namespace>
</namespace>
</header>
<header name="boost/histogram/axis/axis.hpp">
<namespace name="boost">
<namespace name="histogram">
<namespace name="axis">
<class name="axis_base"><purpose>Base class for all axes. </purpose><method-group name="public member functions">
<method name="size" cv="const noexcept"><type>int</type><purpose>Returns the number of bins, excluding overflow/underflow. </purpose></method>
<method name="shape" cv="const noexcept"><type>int</type><purpose>Returns the number of bins, including overflow/underflow. </purpose></method>
<method name="uoflow" cv="const noexcept"><type>bool</type><purpose>Returns true if axis has extra overflow and underflow bins. </purpose></method>
<method name="label" cv="const noexcept"><type>string_view</type><purpose>Returns the axis label, which is a name or description. </purpose></method>
<method name="label"><type>void</type><parameter name="label"><paramtype>string_view</paramtype></parameter><purpose>Change the label of an axis. </purpose></method>
</method-group>
<method-group name="protected member functions">
<method name="operator==" cv="const noexcept"><type>bool</type><parameter name="rhs"><paramtype>const <classname>axis_base</classname> &amp;</paramtype></parameter></method>
</method-group>
<constructor><parameter name="n"><paramtype>unsigned</paramtype></parameter><parameter name="label"><paramtype>string_view</paramtype></parameter></constructor>
<constructor cv="= default"/>
<constructor cv="= default"><parameter name=""><paramtype>const <classname>axis_base</classname> &amp;</paramtype></parameter></constructor>
<copy-assignment cv="= default"><type><classname>axis_base</classname> &amp;</type><parameter name=""><paramtype>const <classname>axis_base</classname> &amp;</paramtype></parameter></copy-assignment>
<constructor><parameter name="rhs"><paramtype><classname>axis_base</classname> &amp;&amp;</paramtype></parameter></constructor>
<copy-assignment><type><classname>axis_base</classname> &amp;</type><parameter name="rhs"><paramtype><classname>axis_base</classname> &amp;&amp;</paramtype></parameter></copy-assignment>
<method-group name="private member functions">
<method name="serialize"><type>void</type><template>
          <template-type-parameter name="Archive"/>
        </template><parameter name=""><paramtype>Archive &amp;</paramtype></parameter><parameter name=""><paramtype>unsigned</paramtype></parameter></method>
</method-group>
</class><class name="axis_base_uoflow"><inherit access="public">boost::histogram::axis::axis_base</inherit><purpose>Base class for axes with overflow/underflow bins. </purpose><method-group name="public member functions">
<method name="shape" cv="const noexcept"><type>int</type><purpose>Returns the number of bins, including overflow/underflow. </purpose></method>
<method name="uoflow" cv="const noexcept"><type>bool</type><purpose>Returns whether axis has extra overflow and underflow bins. </purpose></method>
</method-group>
<method-group name="protected member functions">
<method name="operator==" cv="const noexcept"><type>bool</type><parameter name="rhs"><paramtype>const <classname>axis_base_uoflow</classname> &amp;</paramtype></parameter></method>
</method-group>
<constructor><parameter name="n"><paramtype>unsigned</paramtype></parameter><parameter name="label"><paramtype>string_view</paramtype></parameter><parameter name="uo"><paramtype>enum uoflow</paramtype></parameter></constructor>
<constructor cv="= default"/>
<constructor cv="= default"><parameter name=""><paramtype>const <classname>axis_base_uoflow</classname> &amp;</paramtype></parameter></constructor>
<copy-assignment cv="= default"><type><classname>axis_base_uoflow</classname> &amp;</type><parameter name=""><paramtype>const <classname>axis_base_uoflow</classname> &amp;</paramtype></parameter></copy-assignment>
<constructor><parameter name="rhs"><paramtype><classname>axis_base_uoflow</classname> &amp;&amp;</paramtype></parameter></constructor>
<copy-assignment><type><classname>axis_base_uoflow</classname> &amp;</type><parameter name="rhs"><paramtype><classname>axis_base_uoflow</classname> &amp;&amp;</paramtype></parameter></copy-assignment>
<method-group name="private member functions">
<method name="serialize"><type>void</type><template>
          <template-type-parameter name="Archive"/>
        </template><parameter name=""><paramtype>Archive &amp;</paramtype></parameter><parameter name=""><paramtype>unsigned</paramtype></parameter></method>
</method-group>
</class><namespace name="transform">
<struct name="cos"><method-group name="public static functions">
<method name="forward" specifiers="static"><type>T</type><template>
          <template-type-parameter name="T"/>
        </template><parameter name="v"><paramtype>T</paramtype></parameter></method>
<method name="inverse" specifiers="static"><type>T</type><template>
          <template-type-parameter name="T"/>
        </template><parameter name="v"><paramtype>T</paramtype></parameter></method>
</method-group>
</struct><struct name="identity"><method-group name="public static functions">
<method name="forward" specifiers="static"><type>T</type><template>
          <template-type-parameter name="T"/>
        </template><parameter name="v"><paramtype>T</paramtype></parameter></method>
<method name="inverse" specifiers="static"><type>T</type><template>
          <template-type-parameter name="T"/>
        </template><parameter name="v"><paramtype>T</paramtype></parameter></method>
</method-group>
</struct><struct name="log"><method-group name="public static functions">
<method name="forward" specifiers="static"><type>T</type><template>
          <template-type-parameter name="T"/>
        </template><parameter name="v"><paramtype>T</paramtype></parameter></method>
<method name="inverse" specifiers="static"><type>T</type><template>
          <template-type-parameter name="T"/>
        </template><parameter name="v"><paramtype>T</paramtype></parameter></method>
</method-group>
</struct><struct name="pow"><data-member name="value"><type>double</type></data-member>
<method-group name="public member functions">
<method name="forward" cv="const"><type>T</type><template>
          <template-type-parameter name="T"/>
        </template><parameter name="v"><paramtype>T</paramtype></parameter></method>
<method name="inverse" cv="const"><type>T</type><template>
          <template-type-parameter name="T"/>
        </template><parameter name="v"><paramtype>T</paramtype></parameter></method>
<method name="operator==" cv="const noexcept"><type>bool</type><parameter name="other"><paramtype>const pow &amp;</paramtype></parameter></method>
</method-group>
<constructor cv="= default"/>
<constructor><parameter name="exponent"><paramtype>double</paramtype></parameter></constructor>
<method-group name="private member functions">
<method name="serialize"><type>void</type><template>
          <template-type-parameter name="Archive"/>
        </template><parameter name=""><paramtype>Archive &amp;</paramtype></parameter><parameter name=""><paramtype>unsigned</paramtype></parameter></method>
</method-group>
</struct><struct name="sqrt"><method-group name="public static functions">
<method name="forward" specifiers="static"><type>T</type><template>
          <template-type-parameter name="T"/>
        </template><parameter name="v"><paramtype>T</paramtype></parameter></method>
<method name="inverse" specifiers="static"><type>T</type><template>
          <template-type-parameter name="T"/>
        </template><parameter name="v"><paramtype>T</paramtype></parameter></method>
</method-group>
</struct></namespace>
<enum name="uoflow"><enumvalue name="off"><default>= false</default></enumvalue><enumvalue name="on"><default>= true</default></enumvalue></enum>















</namespace>




















</namespace>
<namespace name="serialization">
</namespace>
</namespace>
</header>
<header name="boost/histogram/axis/iterator.hpp">
<namespace name="boost">
<namespace name="histogram">
<namespace name="axis">
<class name="axis_iterator"><template>
      <template-type-parameter name="Axis"/>
    </template><inherit access="public">iterator_facade&lt; axis_iterator&lt; Axis &gt;, std::pair&lt; int, Axis::bin_type &gt;, random_access_traversal_tag, std::pair&lt; int, Axis::bin_type &gt; &gt;</inherit><method-group name="public member functions">
</method-group>
<constructor specifiers="explicit"><parameter name="axis"><paramtype>const Axis &amp;</paramtype></parameter><parameter name="idx"><paramtype>int</paramtype></parameter></constructor>
<constructor cv="= default"><parameter name="o"><paramtype>const axis_iterator &amp;</paramtype></parameter></constructor>
<copy-assignment cv="= default"><type>axis_iterator &amp;</type><parameter name="o"><paramtype>const axis_iterator &amp;</paramtype></parameter></copy-assignment>
<method-group name="private member functions">
<method name="increment" cv="noexcept"><type>void</type></method>
<method name="decrement" cv="noexcept"><type>void</type></method>
<method name="advance" cv="noexcept"><type>void</type><parameter name="n"><paramtype>int</paramtype></parameter></method>
<method name="distance_to" cv="const noexcept"><type>int</type><parameter name="other"><paramtype>const axis_iterator &amp;</paramtype></parameter></method>
<method name="equal" cv="const noexcept"><type>bool</type><parameter name="other"><paramtype>const axis_iterator &amp;</paramtype></parameter></method>
<method name="dereference" cv="const"><type>std::pair&lt; int, typename Axis::bin_type &gt;</type></method>
</method-group>
</class>














</namespace>




















</namespace>
</namespace>
</header>
<header name="boost/histogram/dynamic_histogram.hpp">
<namespace name="boost">
<namespace name="histogram">
<class name="dynamic_histogram"><template>
      <template-type-parameter name="Axes"/>
      <template-type-parameter name="Storage"/>
    </template><struct name="lin_visitor"><template>
      <template-type-parameter name="Value"/>
    </template><inherit access="public">static_visitor&lt; void &gt;</inherit><data-member name="idx"><type>std::size_t &amp;</type></data-member>
<data-member name="stride"><type>std::size_t &amp;</type></data-member>
<data-member name="val"><type>const Value &amp;</type></data-member>
<method-group name="public member functions">
<method name="operator()" cv="const"><type>void</type><template>
          <template-type-parameter name="A"/>
        </template><parameter name="a"><paramtype>const A &amp;</paramtype></parameter></method>
</method-group>
<constructor><parameter name="i"><paramtype>std::size_t &amp;</paramtype></parameter><parameter name="s"><paramtype>std::size_t &amp;</paramtype></parameter><parameter name="v"><paramtype>const Value &amp;</paramtype></parameter></constructor>
</struct><struct name="xlin_visitor"><template>
      <template-type-parameter name="Value"/>
    </template><inherit access="public">static_visitor&lt; void &gt;</inherit><data-member name="idx"><type>std::size_t &amp;</type></data-member>
<data-member name="stride"><type>std::size_t &amp;</type></data-member>
<data-member name="val"><type>const Value &amp;</type></data-member>
<method-group name="public member functions">
<method name="operator()" cv="const"><type>void</type><template>
          <template-type-parameter name="Axis"/>
        </template><parameter name="a"><paramtype>const Axis &amp;</paramtype></parameter></method>
<method name="impl" cv="const"><type>void</type><template>
          <template-type-parameter name="Axis"/>
        </template><parameter name=""><paramtype>std::true_type</paramtype></parameter><parameter name="a"><paramtype>const Axis &amp;</paramtype></parameter></method>
<method name="impl" cv="const"><type>void</type><template>
          <template-type-parameter name="Axis"/>
        </template><parameter name=""><paramtype>std::false_type</paramtype></parameter><parameter name=""><paramtype>const Axis &amp;</paramtype></parameter></method>
</method-group>
<constructor><parameter name="i"><paramtype>std::size_t &amp;</paramtype></parameter><parameter name="s"><paramtype>std::size_t &amp;</paramtype></parameter><parameter name="v"><paramtype>const Value &amp;</paramtype></parameter></constructor>
</struct><typedef name="any_axis_type"><type><classname>axis::any</classname>&lt; Axes &gt;</type></typedef>
<typedef name="value_type"><type>typename Storage::value_type</type></typedef>
<method-group name="public member functions">
<method name="operator==" cv="const noexcept"><type>bool</type><template>
          <template-type-parameter name="A"/>
          <template-type-parameter name="S"/>
        </template><parameter name="rhs"><paramtype>const static_histogram&lt; A, S &gt; &amp;</paramtype></parameter></method>
<method name="operator==" cv="const noexcept"><type>bool</type><template>
          <template-type-parameter name="A"/>
          <template-type-parameter name="S"/>
        </template><parameter name="rhs"><paramtype>const dynamic_histogram&lt; A, S &gt; &amp;</paramtype></parameter></method>
<method name="operator!=" cv="const noexcept"><type>bool</type><template>
          <template-type-parameter name="A"/>
          <template-type-parameter name="S"/>
        </template><parameter name="rhs"><paramtype>const static_histogram&lt; A, S &gt; &amp;</paramtype></parameter></method>
<method name="operator!=" cv="const noexcept"><type>bool</type><template>
          <template-type-parameter name="A"/>
          <template-type-parameter name="S"/>
        </template><parameter name="rhs"><paramtype>const dynamic_histogram&lt; A, S &gt; &amp;</paramtype></parameter></method>
<method name="operator+="><type>dynamic_histogram &amp;</type><template>
          <template-type-parameter name="A"/>
          <template-type-parameter name="S"/>
        </template><parameter name="rhs"><paramtype>const static_histogram&lt; A, S &gt; &amp;</paramtype></parameter></method>
<method name="operator+="><type>dynamic_histogram &amp;</type><template>
          <template-type-parameter name="A"/>
          <template-type-parameter name="S"/>
        </template><parameter name="rhs"><paramtype>const dynamic_histogram&lt; A, S &gt; &amp;</paramtype></parameter></method>
<method name="operator*="><type>dynamic_histogram &amp;</type><parameter name="rhs"><paramtype>const value_type</paramtype></parameter></method>
<method name="operator/="><type>dynamic_histogram &amp;</type><parameter name="rhs"><paramtype>const value_type</paramtype></parameter></method>
<method name="fill"><type>void</type><template>
          <template-nontype-parameter name="Args"><type>typename...</type></template-nontype-parameter>
        </template><parameter name="args"><paramtype>Args &amp;&amp;...</paramtype></parameter></method>
<method name="fill"><type>void</type><template>
          <template-type-parameter name="Iterator"/>
          <template-type-parameter name=""><default>detail::is_iterator&lt;Iterator&gt;</default></template-type-parameter>
        </template><parameter name="begin"><paramtype>Iterator</paramtype></parameter><parameter name="end"><paramtype>Iterator</paramtype></parameter></method>
<method name="fill"><type>void</type><template>
          <template-type-parameter name="Iterator"/>
          <template-type-parameter name=""><default>detail::is_iterator&lt;Iterator&gt;</default></template-type-parameter>
        </template><parameter name="begin"><paramtype>Iterator</paramtype></parameter><parameter name="end"><paramtype>Iterator</paramtype></parameter><parameter name="n"><paramtype>const count</paramtype></parameter></method>
<method name="fill"><type>void</type><template>
          <template-type-parameter name="Iterator"/>
          <template-type-parameter name=""><default>detail::is_iterator&lt;Iterator&gt;</default></template-type-parameter>
        </template><parameter name="begin"><paramtype>Iterator</paramtype></parameter><parameter name="end"><paramtype>Iterator</paramtype></parameter><parameter name="w"><paramtype>const weight</paramtype></parameter></method>
<method name="value" cv="const"><type>value_type</type><template>
          <template-nontype-parameter name="Indices"><type>typename...</type></template-nontype-parameter>
        </template><parameter name="indices"><paramtype>Indices &amp;&amp;...</paramtype></parameter></method>
<method name="value" cv="const"><type>value_type</type><template>
          <template-type-parameter name="Iterator"/>
          <template-type-parameter name=""><default>detail::is_iterator&lt;Iterator&gt;</default></template-type-parameter>
        </template><parameter name="begin"><paramtype>Iterator</paramtype></parameter><parameter name="end"><paramtype>Iterator</paramtype></parameter></method>
<method name="variance" cv="const"><type><emphasis>unspecified</emphasis></type><template>
          <template-type-parameter name="S"><default>Storage</default></template-type-parameter>
          <template-nontype-parameter name="Indices"><type>typename...</type></template-nontype-parameter>
        </template><parameter name="indices"><paramtype>Indices &amp;&amp;...</paramtype></parameter></method>
<method name="variance" cv="const"><type><emphasis>unspecified</emphasis></type><template>
          <template-type-parameter name="S"><default>Storage</default></template-type-parameter>
          <template-type-parameter name="Iterator"/>
          <template-type-parameter name=""><default>detail::is_iterator&lt;Iterator&gt;</default></template-type-parameter>
        </template><parameter name="begin"><paramtype>Iterator</paramtype></parameter><parameter name="end"><paramtype>Iterator</paramtype></parameter></method>
<method name="dim" cv="const noexcept"><type>unsigned</type><purpose>Number of axes (dimensions) of histogram. </purpose></method>
<method name="bincount" cv="const noexcept"><type>std::size_t</type><purpose>Total number of bins in the histogram (including underflow/overflow) </purpose></method>
<method name="sum" cv="const noexcept"><type>double</type><purpose>Sum of all counts in the histogram. </purpose></method>
<method name="reset"><type>void</type><purpose>Reset bin counters to zero. </purpose></method>
<method name="axis"><type><classname>any_axis_type</classname> &amp;</type><parameter name="i"><paramtype>unsigned</paramtype><default>0</default></parameter><purpose>Return axis <emphasis>i</emphasis>. </purpose></method>
<method name="axis" cv="const"><type>const <classname>any_axis_type</classname> &amp;</type><parameter name="i"><paramtype>unsigned</paramtype><default>0</default></parameter><purpose>Return axis <emphasis>i</emphasis> (const version) </purpose></method>
<method name="for_each_axis" cv="const"><type>void</type><template>
          <template-type-parameter name="Unary"/>
        </template><parameter name="unary"><paramtype>Unary &amp;</paramtype></parameter><purpose>Apply unary functor/function to each axis. </purpose></method>
<method name="reduce_to" cv="const"><type>dynamic_histogram</type><template>
          <template-nontype-parameter name="N"><type>int</type></template-nontype-parameter>
          <template-nontype-parameter name="Rest"><type>typename...</type></template-nontype-parameter>
        </template><parameter name=""><paramtype>mpl::int_&lt; N &gt;</paramtype></parameter><parameter name=""><paramtype>Rest...</paramtype></parameter><purpose>Return a lower dimensional histogram. </purpose></method>
<method name="reduce_to" cv="const"><type>dynamic_histogram</type><template>
          <template-nontype-parameter name="Rest"><type>typename...</type></template-nontype-parameter>
        </template><parameter name="n"><paramtype>int</paramtype></parameter><parameter name="rest"><paramtype>Rest...</paramtype></parameter><purpose>Return a lower dimensional histogram. </purpose></method>
<method name="reduce_to" cv="const"><type>dynamic_histogram</type><template>
          <template-type-parameter name="Iterator"/>
          <template-type-parameter name=""><default>detail::is_iterator&lt;Iterator&gt;</default></template-type-parameter>
        </template><parameter name="begin"><paramtype>Iterator</paramtype></parameter><parameter name="end"><paramtype>Iterator</paramtype></parameter><purpose>Return a lower dimensional histogram. </purpose></method>
</method-group>
<constructor cv="= default"/>
<constructor cv="= default"><parameter name=""><paramtype>const dynamic_histogram &amp;</paramtype></parameter></constructor>
<constructor cv="= default"><parameter name=""><paramtype>dynamic_histogram &amp;&amp;</paramtype></parameter></constructor>
<copy-assignment cv="= default"><type>dynamic_histogram &amp;</type><parameter name=""><paramtype>const dynamic_histogram &amp;</paramtype></parameter></copy-assignment>
<copy-assignment cv="= default"><type>dynamic_histogram &amp;</type><parameter name=""><paramtype>dynamic_histogram &amp;&amp;</paramtype></parameter></copy-assignment>
<constructor specifiers="explicit"><template>
          <template-nontype-parameter name="Axes1"><type>typename...</type></template-nontype-parameter>
        </template><parameter name="axes"><paramtype>const Axes1 &amp;...</paramtype></parameter></constructor>
<constructor><template>
          <template-type-parameter name="Iterator"/>
          <template-type-parameter name=""><default>detail::is_iterator&lt;Iterator&gt;</default></template-type-parameter>
        </template><parameter name="begin"><paramtype>Iterator</paramtype></parameter><parameter name="end"><paramtype>Iterator</paramtype></parameter></constructor>
<constructor specifiers="explicit"><template>
          <template-type-parameter name="A"/>
          <template-type-parameter name="S"/>
        </template><parameter name="rhs"><paramtype>const static_histogram&lt; A, S &gt; &amp;</paramtype></parameter></constructor>
<constructor specifiers="explicit"><template>
          <template-type-parameter name="A"/>
          <template-type-parameter name="S"/>
        </template><parameter name="rhs"><paramtype>const dynamic_histogram&lt; A, S &gt; &amp;</paramtype></parameter></constructor>
<copy-assignment><type>dynamic_histogram &amp;</type><template>
          <template-type-parameter name="A"/>
          <template-type-parameter name="S"/>
        </template><parameter name="rhs"><paramtype>const static_histogram&lt; A, S &gt; &amp;</paramtype></parameter></copy-assignment>
<copy-assignment><type>dynamic_histogram &amp;</type><template>
          <template-type-parameter name="A"/>
          <template-type-parameter name="S"/>
        </template><parameter name="rhs"><paramtype>const dynamic_histogram&lt; A, S &gt; &amp;</paramtype></parameter></copy-assignment>
<constructor specifiers="explicit"><template>
          <template-type-parameter name="S"/>
        </template><parameter name="rhs"><paramtype>dynamic_histogram&lt; Axes, S &gt; &amp;&amp;</paramtype></parameter></constructor>
<copy-assignment><type>dynamic_histogram &amp;</type><template>
          <template-type-parameter name="S"/>
        </template><parameter name="rhs"><paramtype>dynamic_histogram&lt; Axes, S &gt; &amp;&amp;</paramtype></parameter></copy-assignment>
<method-group name="private member functions">
<method name="bincount_from_axes" cv="const noexcept"><type>std::size_t</type></method>
<method name="fill_impl"><type>void</type><template>
          <template-nontype-parameter name="Args"><type>typename...</type></template-nontype-parameter>
        </template><parameter name=""><paramtype>mpl::int_&lt; 0 &gt;</paramtype></parameter><parameter name="args"><paramtype>Args &amp;&amp;...</paramtype></parameter></method>
<method name="fill_impl"><type>void</type><template>
          <template-nontype-parameter name="Args"><type>typename...</type></template-nontype-parameter>
        </template><parameter name=""><paramtype>mpl::int_&lt; 1 &gt;</paramtype></parameter><parameter name="args"><paramtype>Args &amp;&amp;...</paramtype></parameter></method>
<method name="fill_impl"><type>void</type><template>
          <template-nontype-parameter name="Args"><type>typename...</type></template-nontype-parameter>
        </template><parameter name=""><paramtype>mpl::int_&lt; 2 &gt;</paramtype></parameter><parameter name="args"><paramtype>Args &amp;&amp;...</paramtype></parameter></method>
<method name="lin" cv="const"><type>void</type><template>
          <template-nontype-parameter name="D"><type>unsigned</type></template-nontype-parameter>
        </template><parameter name=""><paramtype>std::size_t &amp;</paramtype></parameter><parameter name=""><paramtype>std::size_t &amp;</paramtype></parameter></method>
<method name="lin" cv="const"><type>void</type><template>
          <template-nontype-parameter name="D"><type>unsigned</type></template-nontype-parameter>
          <template-type-parameter name="First"/>
          <template-nontype-parameter name="Rest"><type>typename...</type></template-nontype-parameter>
        </template><parameter name="idx"><paramtype>std::size_t &amp;</paramtype></parameter><parameter name="stride"><paramtype>std::size_t &amp;</paramtype></parameter><parameter name="x"><paramtype>First &amp;&amp;</paramtype></parameter><parameter name="rest"><paramtype>Rest &amp;&amp;...</paramtype></parameter></method>
<method name="xlin" cv="const"><type>void</type><template>
          <template-nontype-parameter name="D"><type>unsigned</type></template-nontype-parameter>
        </template><parameter name=""><paramtype>std::size_t &amp;</paramtype></parameter><parameter name=""><paramtype>std::size_t &amp;</paramtype></parameter></method>
<method name="xlin" cv="const"><type>void</type><template>
          <template-nontype-parameter name="D"><type>unsigned</type></template-nontype-parameter>
          <template-type-parameter name="First"/>
          <template-nontype-parameter name="Rest"><type>typename...</type></template-nontype-parameter>
        </template><parameter name="idx"><paramtype>std::size_t &amp;</paramtype></parameter><parameter name="stride"><paramtype>std::size_t &amp;</paramtype></parameter><parameter name="x"><paramtype>First &amp;&amp;</paramtype></parameter><parameter name="rest"><paramtype>Rest &amp;&amp;...</paramtype></parameter></method>
<method name="xlin_w" cv="const"><type>void</type><template>
          <template-nontype-parameter name="D"><type>unsigned</type></template-nontype-parameter>
        </template><parameter name=""><paramtype>std::size_t &amp;</paramtype></parameter><parameter name=""><paramtype>std::size_t &amp;</paramtype></parameter><parameter name=""><paramtype>double &amp;</paramtype></parameter></method>
<method name="xlin_w" cv="const"><type>enable_if&lt; is_same&lt; First, weight &gt; &gt;::type</type><template>
          <template-nontype-parameter name="D"><type>unsigned</type></template-nontype-parameter>
          <template-type-parameter name="First"/>
          <template-nontype-parameter name="Rest"><type>typename...</type></template-nontype-parameter>
        </template><parameter name="idx"><paramtype>std::size_t &amp;</paramtype></parameter><parameter name="stride"><paramtype>std::size_t &amp;</paramtype></parameter><parameter name="x"><paramtype>double &amp;</paramtype></parameter><parameter name="first"><paramtype>First &amp;&amp;</paramtype></parameter><parameter name="rest"><paramtype>Rest &amp;&amp;...</paramtype></parameter></method>
<method name="xlin_w" cv="const"><type>disable_if&lt; is_same&lt; First, weight &gt; &gt;::type</type><template>
          <template-nontype-parameter name="D"><type>unsigned</type></template-nontype-parameter>
          <template-type-parameter name="First"/>
          <template-nontype-parameter name="Rest"><type>typename...</type></template-nontype-parameter>
        </template><parameter name="idx"><paramtype>std::size_t &amp;</paramtype></parameter><parameter name="stride"><paramtype>std::size_t &amp;</paramtype></parameter><parameter name="x"><paramtype>double &amp;</paramtype></parameter><parameter name="first"><paramtype>First &amp;&amp;</paramtype></parameter><parameter name="rest"><paramtype>Rest &amp;&amp;...</paramtype></parameter></method>
<method name="xlin_n" cv="const"><type>void</type><template>
          <template-nontype-parameter name="D"><type>unsigned</type></template-nontype-parameter>
        </template><parameter name=""><paramtype>std::size_t &amp;</paramtype></parameter><parameter name=""><paramtype>std::size_t &amp;</paramtype></parameter><parameter name=""><paramtype>unsigned &amp;</paramtype></parameter></method>
<method name="xlin_n" cv="const"><type>enable_if&lt; is_same&lt; First, count &gt; &gt;::type</type><template>
          <template-nontype-parameter name="D"><type>unsigned</type></template-nontype-parameter>
          <template-type-parameter name="First"/>
          <template-nontype-parameter name="Rest"><type>typename...</type></template-nontype-parameter>
        </template><parameter name="idx"><paramtype>std::size_t &amp;</paramtype></parameter><parameter name="stride"><paramtype>std::size_t &amp;</paramtype></parameter><parameter name="x"><paramtype>unsigned &amp;</paramtype></parameter><parameter name="first"><paramtype>First &amp;&amp;</paramtype></parameter><parameter name="rest"><paramtype>Rest &amp;&amp;...</paramtype></parameter></method>
<method name="xlin_n" cv="const"><type>disable_if&lt; is_same&lt; First, count &gt; &gt;::type</type><template>
          <template-nontype-parameter name="D"><type>unsigned</type></template-nontype-parameter>
          <template-type-parameter name="First"/>
          <template-nontype-parameter name="Rest"><type>typename...</type></template-nontype-parameter>
        </template><parameter name="idx"><paramtype>std::size_t &amp;</paramtype></parameter><parameter name="stride"><paramtype>std::size_t &amp;</paramtype></parameter><parameter name="x"><paramtype>unsigned &amp;</paramtype></parameter><parameter name="f"><paramtype>First &amp;&amp;</paramtype></parameter><parameter name="rest"><paramtype>Rest &amp;&amp;...</paramtype></parameter></method>
<method name="lin_iter" cv="const"><type>void</type><template>
          <template-type-parameter name="Iterator"/>
        </template><parameter name="idx"><paramtype>std::size_t &amp;</paramtype></parameter><parameter name="stride"><paramtype>std::size_t &amp;</paramtype></parameter><parameter name="iter"><paramtype>Iterator</paramtype></parameter></method>
<method name="xlin_iter" cv="const"><type>void</type><template>
          <template-type-parameter name="Iterator"/>
        </template><parameter name="idx"><paramtype>std::size_t &amp;</paramtype></parameter><parameter name="stride"><paramtype>std::size_t &amp;</paramtype></parameter><parameter name="iter"><paramtype>Iterator</paramtype></parameter></method>
<method name="reduce_impl" cv="const"><type>dynamic_histogram</type><parameter name="b"><paramtype>const std::vector&lt; bool &gt; &amp;</paramtype></parameter></method>
<method name="serialize"><type>void</type><template>
          <template-type-parameter name="Archive"/>
        </template><parameter name=""><paramtype>Archive &amp;</paramtype></parameter><parameter name=""><paramtype>unsigned</paramtype></parameter></method>
</method-group>
</class>









<function name="make_dynamic_histogram"><type><emphasis>unspecified</emphasis></type><template>
          <template-nontype-parameter name="Axes"><type>typename...</type></template-nontype-parameter>
        </template><parameter name="axes"><paramtype>Axes &amp;&amp;...</paramtype></parameter></function>
<function name="make_dynamic_histogram_with"><type><emphasis>unspecified</emphasis></type><template>
          <template-type-parameter name="Storage"/>
          <template-nontype-parameter name="Axes"><type>typename...</type></template-nontype-parameter>
        </template><parameter name="axes"><paramtype>Axes &amp;&amp;...</paramtype></parameter></function>
<function name="make_dynamic_histogram"><type><emphasis>unspecified</emphasis></type><template>
          <template-type-parameter name="Iterator"/>
          <template-type-parameter name=""><default>detail::is_iterator&lt;Iterator&gt;</default></template-type-parameter>
        </template><parameter name="begin"><paramtype>Iterator</paramtype></parameter><parameter name="end"><paramtype>Iterator</paramtype></parameter></function>
<function name="make_dynamic_histogram_with"><type><emphasis>unspecified</emphasis></type><template>
          <template-type-parameter name="Storage"/>
          <template-type-parameter name="Iterator"/>
          <template-type-parameter name=""><default>detail::is_iterator&lt;Iterator&gt;</default></template-type-parameter>
        </template><parameter name="begin"><paramtype>Iterator</paramtype></parameter><parameter name="end"><paramtype>Iterator</paramtype></parameter></function>






</namespace>
<namespace name="python">
</namespace>
<namespace name="serialization">
</namespace>
</namespace>
</header>
<header name="boost/histogram/histogram_fwd.hpp">
<namespace name="boost">
<namespace name="histogram">
<struct name="count"><data-member name="value"><type>unsigned</type></data-member>
<method-group name="public member functions">
</method-group>
<constructor><parameter name="n"><paramtype>unsigned</paramtype></parameter></constructor>
</struct><class name="static_histogram"><template>
      <template-type-parameter name="Axes"/>
      <template-type-parameter name="Storage"/>
    </template><method-group name="public member functions">
<method name="operator==" cv="const noexcept"><type>bool</type><template>
          <template-type-parameter name="A"/>
          <template-type-parameter name="S"/>
        </template><parameter name="rhs"><paramtype>const static_histogram&lt; A, S &gt; &amp;</paramtype></parameter></method>
<method name="operator==" cv="const noexcept"><type>bool</type><template>
          <template-type-parameter name="S"/>
        </template><parameter name="rhs"><paramtype>const static_histogram&lt; Axes, S &gt; &amp;</paramtype></parameter></method>
<method name="operator==" cv="const noexcept"><type>bool</type><template>
          <template-type-parameter name="A"/>
          <template-type-parameter name="S"/>
        </template><parameter name="rhs"><paramtype>const dynamic_histogram&lt; A, S &gt; &amp;</paramtype></parameter></method>
<method name="operator!=" cv="const noexcept"><type>bool</type><template>
          <template-type-parameter name="A"/>
          <template-type-parameter name="S"/>
        </template><parameter name="rhs"><paramtype>const static_histogram&lt; A, S &gt; &amp;</paramtype></parameter></method>
<method name="operator!=" cv="const noexcept"><type>bool</type><template>
          <template-type-parameter name="A"/>
          <template-type-parameter name="S"/>
        </template><parameter name="rhs"><paramtype>const dynamic_histogram&lt; A, S &gt; &amp;</paramtype></parameter></method>
<method name="operator+="><type>static_histogram &amp;</type><template>
          <template-type-parameter name="S"/>
        </template><parameter name="rhs"><paramtype>const static_histogram&lt; Axes, S &gt; &amp;</paramtype></parameter></method>
<method name="operator+="><type>static_histogram &amp;</type><template>
          <template-type-parameter name="A"/>
          <template-type-parameter name="S"/>
        </template><parameter name="rhs"><paramtype>const dynamic_histogram&lt; A, S &gt; &amp;</paramtype></parameter></method>
<method name="operator*="><type>static_histogram &amp;</type><parameter name="rhs"><paramtype>const value_type</paramtype></parameter></method>
<method name="operator/="><type>static_histogram &amp;</type><parameter name="rhs"><paramtype>const value_type</paramtype></parameter></method>
<method name="fill"><type>void</type><template>
          <template-nontype-parameter name="Args"><type>typename...</type></template-nontype-parameter>
        </template><parameter name="args"><paramtype>Args &amp;&amp;...</paramtype></parameter></method>
<method name="value" cv="const"><type>value_type</type><template>
          <template-nontype-parameter name="Indices"><type>typename...</type></template-nontype-parameter>
        </template><parameter name="indices"><paramtype>Indices &amp;&amp;...</paramtype></parameter></method>
<method name="variance" cv="const"><type><emphasis>unspecified</emphasis></type><template>
          <template-type-parameter name="S"><default>Storage</default></template-type-parameter>
          <template-nontype-parameter name="Indices"><type>typename...</type></template-nontype-parameter>
        </template><parameter name="indices"><paramtype>Indices &amp;&amp;...</paramtype></parameter></method>
<method name="dim" cv="const noexcept"><type>constexpr unsigned</type><purpose>Number of axes (dimensions) of histogram. </purpose></method>
<method name="bincount" cv="const noexcept"><type>std::size_t</type><purpose>Total number of bins in the histogram (including underflow/overflow) </purpose></method>
<method name="sum" cv="const noexcept"><type>double</type><purpose>Sum of all counts in the histogram. </purpose></method>
<method name="reset"><type>void</type><purpose>Reset bin counters to zero. </purpose></method>
<method name="axis" cv="const"><type>std::add_const&lt; typename fusion::result_of::value_at_c&lt; axes_type, N &gt;::type &gt;::type &amp;</type><template>
          <template-nontype-parameter name="N"><type>int</type></template-nontype-parameter>
        </template><parameter name=""><paramtype>mpl::int_&lt; N &gt;</paramtype></parameter><purpose>Get N-th axis (const version) </purpose></method>
<method name="axis"><type>fusion::result_of::value_at_c&lt; axes_type, N &gt;::type &amp;</type><template>
          <template-nontype-parameter name="N"><type>int</type></template-nontype-parameter>
        </template><parameter name=""><paramtype>mpl::int_&lt; N &gt;</paramtype></parameter><purpose>Get N-th axis. </purpose></method>
<method name="axis" cv="const"><type>constexpr std::add_const&lt; typename fusion::result_of::value_at_c&lt; axes_type, 0 &gt;::type &gt;::type &amp;</type></method>
<method name="axis"><type>fusion::result_of::value_at_c&lt; axes_type, 0 &gt;::type &amp;</type></method>
<method name="for_each_axis" cv="const"><type>void</type><template>
          <template-type-parameter name="Unary"/>
        </template><parameter name="unary"><paramtype>Unary &amp;</paramtype></parameter><purpose>Apply unary functor/function to each axis. </purpose></method>
<method name="reduce_to" cv="const"><type>auto</type><template>
          <template-nontype-parameter name="N"><type>int</type></template-nontype-parameter>
          <template-nontype-parameter name="Rest"><type>typename...</type></template-nontype-parameter>
        </template><parameter name=""><paramtype>mpl::int_&lt; N &gt;</paramtype></parameter><parameter name=""><paramtype>Rest...</paramtype></parameter><purpose>Returns a lower-dimensional histogram. </purpose></method>
</method-group>
<constructor cv="= default"/>
<constructor cv="= default"><parameter name="rhs"><paramtype>const static_histogram &amp;</paramtype></parameter></constructor>
<constructor cv="= default"><parameter name="rhs"><paramtype>static_histogram &amp;&amp;</paramtype></parameter></constructor>
<copy-assignment cv="= default"><type>static_histogram &amp;</type><parameter name="rhs"><paramtype>const static_histogram &amp;</paramtype></parameter></copy-assignment>
<copy-assignment cv="= default"><type>static_histogram &amp;</type><parameter name="rhs"><paramtype>static_histogram &amp;&amp;</paramtype></parameter></copy-assignment>
<constructor specifiers="explicit"><template>
          <template-nontype-parameter name="Axis"><type>typename...</type></template-nontype-parameter>
        </template><parameter name="axis"><paramtype>const Axis &amp;...</paramtype></parameter></constructor>
<constructor specifiers="explicit"><parameter name="axes"><paramtype>axes_type &amp;&amp;</paramtype></parameter></constructor>
<constructor specifiers="explicit"><template>
          <template-type-parameter name="S"/>
        </template><parameter name="rhs"><paramtype>const static_histogram&lt; Axes, S &gt; &amp;</paramtype></parameter></constructor>
<constructor specifiers="explicit"><template>
          <template-type-parameter name="A"/>
          <template-type-parameter name="S"/>
        </template><parameter name="rhs"><paramtype>const dynamic_histogram&lt; A, S &gt; &amp;</paramtype></parameter></constructor>
<copy-assignment><type>static_histogram &amp;</type><template>
          <template-type-parameter name="S"/>
        </template><parameter name="rhs"><paramtype>const static_histogram&lt; Axes, S &gt; &amp;</paramtype></parameter></copy-assignment>
<copy-assignment><type>static_histogram &amp;</type><template>
          <template-type-parameter name="A"/>
          <template-type-parameter name="S"/>
        </template><parameter name="rhs"><paramtype>const dynamic_histogram&lt; A, S &gt; &amp;</paramtype></parameter></copy-assignment>
<method-group name="private member functions">
<method name="bincount_from_axes" cv="const noexcept"><type>std::size_t</type></method>
<method name="fill_impl"><type>void</type><template>
          <template-nontype-parameter name="Args"><type>typename...</type></template-nontype-parameter>
        </template><parameter name=""><paramtype>mpl::int_&lt; 0 &gt;</paramtype></parameter><parameter name="args"><paramtype>Args &amp;&amp;...</paramtype></parameter></method>
<method name="fill_impl"><type>void</type><template>
          <template-nontype-parameter name="Args"><type>typename...</type></template-nontype-parameter>
        </template><parameter name=""><paramtype>mpl::int_&lt; 1 &gt;</paramtype></parameter><parameter name="args"><paramtype>Args &amp;&amp;...</paramtype></parameter></method>
<method name="fill_impl"><type>void</type><template>
          <template-nontype-parameter name="Args"><type>typename...</type></template-nontype-parameter>
        </template><parameter name=""><paramtype>mpl::int_&lt; 2 &gt;</paramtype></parameter><parameter name="args"><paramtype>Args &amp;&amp;...</paramtype></parameter></method>
<method name="lin" cv="const"><type>void</type><template>
          <template-nontype-parameter name="D"><type>unsigned</type></template-nontype-parameter>
        </template><parameter name=""><paramtype>std::size_t &amp;</paramtype></parameter><parameter name=""><paramtype>std::size_t &amp;</paramtype></parameter></method>
<method name="lin" cv="const"><type>void</type><template>
          <template-nontype-parameter name="D"><type>unsigned</type></template-nontype-parameter>
          <template-type-parameter name="First"/>
          <template-nontype-parameter name="Rest"><type>typename...</type></template-nontype-parameter>
        </template><parameter name="idx"><paramtype>std::size_t &amp;</paramtype></parameter><parameter name="stride"><paramtype>std::size_t &amp;</paramtype></parameter><parameter name="x"><paramtype>First &amp;&amp;</paramtype></parameter><parameter name="rest"><paramtype>Rest &amp;&amp;...</paramtype></parameter></method>
<method name="xlin" cv="const"><type>void</type><template>
          <template-nontype-parameter name="D"><type>unsigned</type></template-nontype-parameter>
        </template><parameter name=""><paramtype>std::size_t &amp;</paramtype></parameter><parameter name=""><paramtype>std::size_t &amp;</paramtype></parameter></method>
<method name="xlin" cv="const"><type>void</type><template>
          <template-nontype-parameter name="D"><type>unsigned</type></template-nontype-parameter>
          <template-type-parameter name="First"/>
          <template-nontype-parameter name="Rest"><type>typename...</type></template-nontype-parameter>
        </template><parameter name="idx"><paramtype>std::size_t &amp;</paramtype></parameter><parameter name="stride"><paramtype>std::size_t &amp;</paramtype></parameter><parameter name="first"><paramtype>First &amp;&amp;</paramtype></parameter><parameter name="rest"><paramtype>Rest &amp;&amp;...</paramtype></parameter></method>
<method name="xlin_w" cv="const"><type>void</type><template>
          <template-nontype-parameter name="D"><type>unsigned</type></template-nontype-parameter>
        </template><parameter name=""><paramtype>std::size_t &amp;</paramtype></parameter><parameter name=""><paramtype>std::size_t &amp;</paramtype></parameter><parameter name=""><paramtype>double &amp;</paramtype></parameter></method>
<method name="xlin_w" cv="const"><type>disable_if&lt; is_same&lt; First, weight &gt; &gt;::type</type><template>
          <template-nontype-parameter name="D"><type>unsigned</type></template-nontype-parameter>
          <template-type-parameter name="First"/>
          <template-nontype-parameter name="Rest"><type>typename...</type></template-nontype-parameter>
        </template><parameter name="idx"><paramtype>std::size_t &amp;</paramtype></parameter><parameter name="stride"><paramtype>std::size_t &amp;</paramtype></parameter><parameter name="x"><paramtype>double &amp;</paramtype></parameter><parameter name="first"><paramtype>First &amp;&amp;</paramtype></parameter><parameter name="rest"><paramtype>Rest &amp;&amp;...</paramtype></parameter></method>
<method name="xlin_w" cv="const"><type>enable_if&lt; is_same&lt; First, weight &gt; &gt;::type</type><template>
          <template-nontype-parameter name="D"><type>unsigned</type></template-nontype-parameter>
          <template-type-parameter name="First"/>
          <template-nontype-parameter name="Rest"><type>typename...</type></template-nontype-parameter>
        </template><parameter name="idx"><paramtype>std::size_t &amp;</paramtype></parameter><parameter name="stride"><paramtype>std::size_t &amp;</paramtype></parameter><parameter name="x"><paramtype>double &amp;</paramtype></parameter><parameter name="first"><paramtype>First &amp;&amp;</paramtype></parameter><parameter name="rest"><paramtype>Rest &amp;&amp;...</paramtype></parameter></method>
<method name="xlin_n" cv="const"><type>void</type><template>
          <template-nontype-parameter name="D"><type>unsigned</type></template-nontype-parameter>
        </template><parameter name=""><paramtype>std::size_t &amp;</paramtype></parameter><parameter name=""><paramtype>std::size_t &amp;</paramtype></parameter><parameter name=""><paramtype>unsigned &amp;</paramtype></parameter></method>
<method name="xlin_n" cv="const"><type>disable_if&lt; is_same&lt; First, count &gt; &gt;::type</type><template>
          <template-nontype-parameter name="D"><type>unsigned</type></template-nontype-parameter>
          <template-type-parameter name="First"/>
          <template-nontype-parameter name="Rest"><type>typename...</type></template-nontype-parameter>
        </template><parameter name="idx"><paramtype>std::size_t &amp;</paramtype></parameter><parameter name="stride"><paramtype>std::size_t &amp;</paramtype></parameter><parameter name="x"><paramtype>unsigned &amp;</paramtype></parameter><parameter name="first"><paramtype>First &amp;&amp;</paramtype></parameter><parameter name="rest"><paramtype>Rest &amp;&amp;...</paramtype></parameter></method>
<method name="xlin_n" cv="const"><type>enable_if&lt; is_same&lt; First, count &gt; &gt;::type</type><template>
          <template-nontype-parameter name="D"><type>unsigned</type></template-nontype-parameter>
          <template-type-parameter name="First"/>
          <template-nontype-parameter name="Rest"><type>typename...</type></template-nontype-parameter>
        </template><parameter name="idx"><paramtype>std::size_t &amp;</paramtype></parameter><parameter name="stride"><paramtype>std::size_t &amp;</paramtype></parameter><parameter name="x"><paramtype>unsigned &amp;</paramtype></parameter><parameter name="first"><paramtype>First &amp;&amp;</paramtype></parameter><parameter name="rest"><paramtype>Rest &amp;&amp;...</paramtype></parameter></method>
<method name="reduce_impl" cv="const"><type>void</type><template>
          <template-type-parameter name="H"/>
        </template><parameter name="h"><paramtype>H &amp;</paramtype></parameter><parameter name="b"><paramtype>const std::vector&lt; bool &gt; &amp;</paramtype></parameter></method>
<method name="serialize"><type>void</type><template>
          <template-type-parameter name="Archive"/>
        </template><parameter name=""><paramtype>Archive &amp;</paramtype></parameter><parameter name=""><paramtype>unsigned</paramtype></parameter></method>
</method-group>
</class><struct name="weight"><data-member name="value"><type>double</type></data-member>
<method-group name="public member functions">
</method-group>
<constructor><parameter name="w"><paramtype>double</paramtype></parameter></constructor>
</struct><namespace name="axis">
<class name="any"><template>
      <template-type-parameter name="Axes"/>
    </template><inherit access="public">make_variant_over::type&lt; Axes &gt;</inherit><purpose>Polymorphic axis type. </purpose><method-group name="public member functions">
<method name="size" cv="const"><type>int</type></method>
<method name="shape" cv="const"><type>int</type></method>
<method name="uoflow" cv="const"><type>bool</type></method>
<method name="index" cv="const"><type>int</type><parameter name="x"><paramtype>const value_type</paramtype></parameter></method>
<method name="label" cv="const"><type>string_view</type></method>
<method name="label"><type>void</type><parameter name="x"><paramtype>const string_view</paramtype></parameter></method>
<method name="operator[]" cv="const"><type>bin_type</type><parameter name="i"><paramtype>const int</paramtype></parameter></method>
<method name="operator==" cv="const"><type>bool</type><parameter name="rhs"><paramtype>const <classname>any</classname> &amp;</paramtype></parameter></method>
<method name="begin" cv="const"><type>const_iterator</type></method>
<method name="end" cv="const"><type>const_iterator</type></method>
</method-group>
<constructor cv="= default"/>
<constructor cv="= default"><parameter name="t"><paramtype>const <classname>any</classname> &amp;</paramtype></parameter></constructor>
<constructor cv="= default"><parameter name="t"><paramtype><classname>any</classname> &amp;&amp;</paramtype></parameter></constructor>
<copy-assignment cv="= default"><type><classname>any</classname> &amp;</type><parameter name="t"><paramtype>const <classname>any</classname> &amp;</paramtype></parameter></copy-assignment>
<copy-assignment cv="= default"><type><classname>any</classname> &amp;</type><parameter name="t"><paramtype><classname>any</classname> &amp;&amp;</paramtype></parameter></copy-assignment>
<constructor><template>
          <template-type-parameter name="T"/>
          <template-type-parameter name=""><default>typename std::enable_if&lt;    mpl::contains&lt;Axes, T&gt;::value  &gt;::type</default></template-type-parameter>
        </template><parameter name="t"><paramtype>const T &amp;</paramtype></parameter></constructor>
<copy-assignment><type><classname>any</classname> &amp;</type><template>
          <template-type-parameter name="T"/>
          <template-type-parameter name=""><default>typename std::enable_if&lt;    mpl::contains&lt;Axes, T&gt;::value  &gt;::type</default></template-type-parameter>
        </template><parameter name="t"><paramtype>const T &amp;</paramtype></parameter></copy-assignment>
<copy-assignment><type><classname>any</classname> &amp;</type><template>
          <template-type-parameter name="T"/>
          <template-type-parameter name=""><default>typename std::enable_if&lt;    mpl::contains&lt;Axes, T&gt;::value  &gt;::type</default></template-type-parameter>
        </template><parameter name="t"><paramtype>T &amp;&amp;</paramtype></parameter></copy-assignment>
<method-group name="private member functions">
<method name="serialize"><type>void</type><template>
          <template-type-parameter name="Archive"/>
        </template><parameter name=""><paramtype>Archive &amp;</paramtype></parameter><parameter name=""><paramtype>unsigned</paramtype></parameter></method>
</method-group>
</class><class name="category"><template>
      <template-type-parameter name="T"/>
    </template><inherit access="public">boost::histogram::axis::axis_base</inherit><purpose>Axis which maps unique single values to bins (one on one). </purpose><description><para>The axis maps a set of values to bins, following the order of arguments in the constructor. There is an optional overflow bin for this axis, which counts values that are not part of the set. Binning is a O(1) operation. The value type must be hashable. </para></description><method-group name="public member functions">
<method name="index" cv="const noexcept"><type>int</type><parameter name="x"><paramtype>const value_type &amp;</paramtype></parameter><purpose>Returns the bin index for the passed argument. </purpose></method>
<method name="operator[]" cv="const"><type>bin_type</type><parameter name="idx"><paramtype>int</paramtype></parameter><purpose>Returns the value for the bin index (performs a range check). </purpose></method>
<method name="operator==" cv="const noexcept"><type>bool</type><parameter name="o"><paramtype>const <classname>category</classname> &amp;</paramtype></parameter></method>
<method name="begin" cv="const"><type>const_iterator</type></method>
<method name="end" cv="const"><type>const_iterator</type></method>
</method-group>
<constructor cv="= default"/>
<constructor><parameter name="rhs"><paramtype>const <classname>category</classname> &amp;</paramtype></parameter></constructor>
<copy-assignment><type><classname>category</classname> &amp;</type><parameter name="rhs"><paramtype>const <classname>category</classname> &amp;</paramtype></parameter></copy-assignment>
<constructor cv="= default"><parameter name="rhs"><paramtype><classname>category</classname> &amp;&amp;</paramtype></parameter></constructor>
<copy-assignment cv="= default"><type><classname>category</classname> &amp;</type><parameter name="rhs"><paramtype><classname>category</classname> &amp;&amp;</paramtype></parameter></copy-assignment>
<constructor><parameter name="seq"><paramtype>std::initializer_list&lt; T &gt;</paramtype><description><para>sequence of unique values. </para></description></parameter><parameter name="label"><paramtype>string_view</paramtype><default>{}</default></parameter><purpose>Construct from an initializer list of strings. </purpose><description><para>
</para></description></constructor>
<constructor><template>
          <template-type-parameter name="Iterator"/>
        </template><parameter name="begin"><paramtype>Iterator</paramtype></parameter><parameter name="end"><paramtype>Iterator</paramtype></parameter><parameter name="label"><paramtype>string_view</paramtype><default>{}</default></parameter></constructor>
<method-group name="private member functions">
<method name="serialize"><type>void</type><template>
          <template-type-parameter name="Archive"/>
        </template><parameter name=""><paramtype>Archive &amp;</paramtype></parameter><parameter name=""><paramtype>unsigned</paramtype></parameter></method>
</method-group>
</class><class name="circular"><template>
      <template-type-parameter name="RealType"/>
    </template><inherit access="public">boost::histogram::axis::axis_base</inherit><purpose>Axis for real values on a circle. </purpose><description><para>The axis is circular and wraps around reaching the perimeter value. Therefore, there are no overflow/underflow bins for this axis. Binning is a O(1) operation. </para></description><method-group name="public member functions">
<method name="index" cv="const noexcept"><type>int</type><parameter name="x"><paramtype>value_type</paramtype></parameter><purpose>Returns the bin index for the passed argument. </purpose></method>
<method name="operator[]" cv="const"><type>bin_type</type><parameter name="idx"><paramtype>int</paramtype></parameter><purpose>Returns the starting edge of the bin. </purpose></method>
<method name="operator==" cv="const noexcept"><type>bool</type><parameter name="o"><paramtype>const <classname>circular</classname> &amp;</paramtype></parameter></method>
<method name="perimeter" cv="const"><type>value_type</type></method>
<method name="phase" cv="const"><type>value_type</type></method>
<method name="begin" cv="const"><type>const_iterator</type></method>
<method name="end" cv="const"><type>const_iterator</type></method>
</method-group>
<constructor specifiers="explicit"><parameter name="n"><paramtype>unsigned</paramtype><description><para>number of bins. </para></description></parameter><parameter name="phase"><paramtype>value_type</paramtype><default>0.0</default><description><para>starting phase. </para></description></parameter><parameter name="perimeter"><paramtype>value_type</paramtype><default>math::double_constants::two_pi</default><description><para>range after which value wraps around. </para></description></parameter><parameter name="label"><paramtype>string_view</paramtype><default>{}</default><description><para>description of the axis. </para></description></parameter><purpose>Constructor for n bins with an optional offset. </purpose><description><para>
</para></description></constructor>
<constructor cv="= default"/>
<constructor cv="= default"><parameter name=""><paramtype>const <classname>circular</classname> &amp;</paramtype></parameter></constructor>
<copy-assignment cv="= default"><type><classname>circular</classname> &amp;</type><parameter name=""><paramtype>const <classname>circular</classname> &amp;</paramtype></parameter></copy-assignment>
<constructor cv="= default"><parameter name=""><paramtype><classname>circular</classname> &amp;&amp;</paramtype></parameter></constructor>
<copy-assignment cv="= default"><type><classname>circular</classname> &amp;</type><parameter name=""><paramtype><classname>circular</classname> &amp;&amp;</paramtype></parameter></copy-assignment>
<method-group name="private member functions">
<method name="serialize"><type>void</type><template>
          <template-type-parameter name="Archive"/>
        </template><parameter name=""><paramtype>Archive &amp;</paramtype></parameter><parameter name=""><paramtype>unsigned</paramtype></parameter></method>
</method-group>
</class><class name="integer"><template>
      <template-type-parameter name="IntType"/>
    </template><inherit access="public">boost::histogram::axis::axis_base_uoflow</inherit><purpose>Axis for an interval of integral values with unit steps. </purpose><description><para>Binning is a O(1) operation. This axis operates faster than a regular. </para></description><method-group name="public member functions">
<method name="index" cv="const noexcept"><type>int</type><parameter name="x"><paramtype>value_type</paramtype></parameter><purpose>Returns the bin index for the passed argument. </purpose></method>
<method name="operator[]" cv="const"><type>bin_type</type><parameter name="idx"><paramtype>int</paramtype></parameter><purpose>Returns the integer that is mapped to the bin index. </purpose></method>
<method name="operator==" cv="const noexcept"><type>bool</type><parameter name="o"><paramtype>const <classname>integer</classname> &amp;</paramtype></parameter></method>
<method name="begin" cv="const"><type>const_iterator</type></method>
<method name="end" cv="const"><type>const_iterator</type></method>
</method-group>
<constructor><parameter name="lower"><paramtype>value_type</paramtype><description><para>smallest integer of the covered range. </para></description></parameter><parameter name="upper"><paramtype>value_type</paramtype><description><para>largest integer of the covered range. </para></description></parameter><parameter name="label"><paramtype>string_view</paramtype><default>{}</default><description><para>description of the axis. </para></description></parameter><parameter name="uo"><paramtype>enum uoflow</paramtype><default>::boost::histogram::axis::uoflow::on</default></parameter><purpose>Construct axis over a semi-open integer interval [lower, upper). </purpose><description><para>
</para></description></constructor>
<constructor cv="= default"/>
<constructor cv="= default"><parameter name=""><paramtype>const <classname>integer</classname> &amp;</paramtype></parameter></constructor>
<copy-assignment cv="= default"><type><classname>integer</classname> &amp;</type><parameter name=""><paramtype>const <classname>integer</classname> &amp;</paramtype></parameter></copy-assignment>
<constructor cv="= default"><parameter name=""><paramtype><classname>integer</classname> &amp;&amp;</paramtype></parameter></constructor>
<copy-assignment cv="= default"><type><classname>integer</classname> &amp;</type><parameter name=""><paramtype><classname>integer</classname> &amp;&amp;</paramtype></parameter></copy-assignment>
<method-group name="private member functions">
<method name="serialize"><type>void</type><template>
          <template-type-parameter name="Archive"/>
        </template><parameter name=""><paramtype>Archive &amp;</paramtype></parameter><parameter name=""><paramtype>unsigned</paramtype></parameter></method>
</method-group>
</class><class name="regular"><template>
      <template-type-parameter name="RealType"/>
      <template-type-parameter name="Transform"/>
    </template><inherit access="public">boost::histogram::axis::axis_base_uoflow</inherit><inherit access="private">Transform</inherit><purpose>Axis for equidistant intervals on the real line. </purpose><description><para>The most common binning strategy. Very fast. Binning is a O(1) operation. </para></description><method-group name="public member functions">
<method name="index" cv="const noexcept"><type>int</type><parameter name="x"><paramtype>value_type</paramtype></parameter><purpose>Returns the bin index for the passed argument. </purpose></method>
<method name="operator[]" cv="const noexcept"><type>bin_type</type><parameter name="idx"><paramtype>int</paramtype></parameter><purpose>Returns the starting edge of the bin. </purpose></method>
<method name="operator==" cv="const noexcept"><type>bool</type><parameter name="o"><paramtype>const <classname>regular</classname> &amp;</paramtype></parameter></method>
<method name="begin" cv="const"><type>const_iterator</type></method>
<method name="end" cv="const"><type>const_iterator</type></method>
<method name="transform" cv="const noexcept"><type>const Transform &amp;</type></method>
</method-group>
<constructor><parameter name="n"><paramtype>unsigned</paramtype><description><para>number of bins. </para></description></parameter><parameter name="lower"><paramtype>value_type</paramtype><description><para>low edge of first bin. </para></description></parameter><parameter name="upper"><paramtype>value_type</paramtype><description><para>high edge of last bin. </para></description></parameter><parameter name="label"><paramtype>string_view</paramtype><default>{}</default><description><para>description of the axis. </para></description></parameter><parameter name="uo"><paramtype>enum uoflow</paramtype><default>::boost::histogram::axis::uoflow::on</default></parameter><parameter name="trans"><paramtype>Transform</paramtype><default>Transform()</default><description><para>arguments passed to the transform. </para></description></parameter><purpose>Construct axis with n bins over real range [lower, upper). </purpose><description><para>
</para></description></constructor>
<constructor cv="= default"/>
<constructor cv="= default"><parameter name=""><paramtype>const <classname>regular</classname> &amp;</paramtype></parameter></constructor>
<copy-assignment cv="= default"><type><classname>regular</classname> &amp;</type><parameter name=""><paramtype>const <classname>regular</classname> &amp;</paramtype></parameter></copy-assignment>
<constructor cv="= default"><parameter name=""><paramtype><classname>regular</classname> &amp;&amp;</paramtype></parameter></constructor>
<copy-assignment cv="= default"><type><classname>regular</classname> &amp;</type><parameter name=""><paramtype><classname>regular</classname> &amp;&amp;</paramtype></parameter></copy-assignment>
<method-group name="private member functions">
<method name="serialize"><type>void</type><template>
          <template-type-parameter name="Archive"/>
        </template><parameter name=""><paramtype>Archive &amp;</paramtype></parameter><parameter name=""><paramtype>unsigned</paramtype></parameter></method>
</method-group>
</class><class name="variable"><template>
      <template-type-parameter name="RealType"/>
    </template><inherit access="public">boost::histogram::axis::axis_base_uoflow</inherit><purpose>Axis for non-equidistant bins on the real line. </purpose><description><para>Binning is a O(log(N)) operation. If speed matters and the problem domain allows it, prefer a regular axis, possibly with a transform. </para></description><method-group name="public member functions">
<method name="index" cv="const noexcept"><type>int</type><parameter name="x"><paramtype>value_type</paramtype></parameter><purpose>Returns the bin index for the passed argument. </purpose></method>
<method name="operator[]" cv="const"><type>bin_type</type><parameter name="idx"><paramtype>int</paramtype></parameter><purpose>Returns the starting edge of the bin. </purpose></method>
<method name="operator==" cv="const noexcept"><type>bool</type><parameter name="o"><paramtype>const <classname>variable</classname> &amp;</paramtype></parameter></method>
<method name="begin" cv="const"><type>const_iterator</type></method>
<method name="end" cv="const"><type>const_iterator</type></method>
</method-group>
<constructor><parameter name="x"><paramtype>std::initializer_list&lt; value_type &gt;</paramtype><description><para>sequence of bin edges. </para></description></parameter><parameter name="label"><paramtype>string_view</paramtype><default>{}</default><description><para>description of the axis. </para></description></parameter><parameter name="uo"><paramtype>enum uoflow</paramtype><default>::boost::histogram::axis::uoflow::on</default></parameter><purpose>Construct an axis from bin edges. </purpose><description><para>
</para></description></constructor>
<constructor><template>
          <template-type-parameter name="Iterator"/>
        </template><parameter name="begin"><paramtype>Iterator</paramtype></parameter><parameter name="end"><paramtype>Iterator</paramtype></parameter><parameter name="label"><paramtype>string_view</paramtype><default>{}</default></parameter><parameter name="uo"><paramtype>enum uoflow</paramtype><default>::boost::histogram::axis::uoflow::on</default></parameter></constructor>
<constructor cv="= default"/>
<constructor><parameter name="o"><paramtype>const <classname>variable</classname> &amp;</paramtype></parameter></constructor>
<copy-assignment><type><classname>variable</classname> &amp;</type><parameter name="o"><paramtype>const <classname>variable</classname> &amp;</paramtype></parameter></copy-assignment>
<constructor cv="= default"><parameter name=""><paramtype><classname>variable</classname> &amp;&amp;</paramtype></parameter></constructor>
<copy-assignment cv="= default"><type><classname>variable</classname> &amp;</type><parameter name=""><paramtype><classname>variable</classname> &amp;&amp;</paramtype></parameter></copy-assignment>
<method-group name="private member functions">
<method name="serialize"><type>void</type><template>
          <template-type-parameter name="Archive"/>
        </template><parameter name=""><paramtype>Archive &amp;</paramtype></parameter><parameter name=""><paramtype>unsigned</paramtype></parameter></method>
</method-group>
</class><namespace name="transform">
</namespace>
<typedef name="builtins"><type>mpl::vector&lt; <classname>axis::regular</classname>&lt;&gt;, <classname>axis::regular</classname>&lt; double, axis::transform::log &gt;, <classname>axis::regular</classname>&lt; double, axis::transform::sqrt &gt;, <classname>axis::regular</classname>&lt; double, axis::transform::cos &gt;, <classname>axis::regular</classname>&lt; double, axis::transform::pow &gt;, <classname>axis::circular</classname>&lt;&gt;, <classname>axis::variable</classname>&lt;&gt;, <classname>axis::integer</classname>&lt;&gt;, <classname>axis::category</classname>&lt;&gt;, <classname>axis::category</classname>&lt; std::string &gt; &gt;</type></typedef>















</namespace>




















</namespace>
</namespace>
</header>
<header name="boost/histogram/interval.hpp">
<namespace name="boost">
<namespace name="histogram">
<namespace name="axis">
<class name="interval"><template>
      <template-type-parameter name="T"/>
    </template><method-group name="public member functions">
<method name="lower" cv="const noexcept"><type>const T &amp;</type></method>
<method name="upper" cv="const noexcept"><type>const T &amp;</type></method>
<method name="operator==" cv="const noexcept"><type>bool</type><parameter name="i"><paramtype>const interval &amp;</paramtype></parameter></method>
<method name="operator!=" cv="const noexcept"><type>bool</type><parameter name="i"><paramtype>const interval &amp;</paramtype></parameter></method>
</method-group>
<constructor cv="= default"/>
<constructor cv="= default"><parameter name=""><paramtype>const interval &amp;</paramtype></parameter></constructor>
<copy-assignment cv="= default"><type>interval &amp;</type><parameter name=""><paramtype>const interval &amp;</paramtype></parameter></copy-assignment>
<constructor cv="= default"><parameter name=""><paramtype>interval &amp;&amp;</paramtype></parameter></constructor>
<copy-assignment cv="= default"><type>interval &amp;</type><parameter name=""><paramtype>interval &amp;&amp;</paramtype></parameter></copy-assignment>
<constructor><parameter name="x"><paramtype>const T &amp;</paramtype></parameter><parameter name="y"><paramtype>const T &amp;</paramtype></parameter></constructor>
<constructor><parameter name="x"><paramtype>T &amp;&amp;</paramtype></parameter><parameter name="y"><paramtype>T &amp;&amp;</paramtype></parameter></constructor>
<constructor><template>
          <template-type-parameter name="U"/>
        </template><parameter name="i"><paramtype>const interval&lt; U &gt; &amp;</paramtype></parameter></constructor>
</class>














</namespace>




















</namespace>
</namespace>
</header>
<header name="boost/histogram/literals.hpp">
<namespace name="boost">
<namespace name="histogram">
<namespace name="literals">
<function name="operator&quot;&quot;_c"><type>auto</type><template>
          <template-nontype-parameter name="Digits"><type>char...</type></template-nontype-parameter>
        </template></function>
</namespace>




















</namespace>
</namespace>
</header>
<header name="boost/histogram/ostream_operators.hpp">
<namespace name="boost">
<namespace name="histogram">














<function name="operator&lt;&lt;"><type>std::ostream &amp;</type><template>
          <template-nontype-parameter name="H"><type>template&lt; class, class &gt; class</type></template-nontype-parameter>
          <template-type-parameter name="A"/>
          <template-type-parameter name="S"/>
        </template><parameter name="os"><paramtype>std::ostream &amp;</paramtype></parameter><parameter name="h"><paramtype>const H&lt; A, S &gt; &amp;</paramtype></parameter></function>





</namespace>
</namespace>
</header>
<header name="boost/histogram/axis/ostream_operators.hpp">
<namespace name="boost">
<namespace name="histogram">
<namespace name="axis">








<function name="operator&lt;&lt;"><type>std::ostream &amp;</type><template>
          <template-type-parameter name="RealType"/>
          <template-type-parameter name="Transform"/>
        </template><parameter name="os"><paramtype>std::ostream &amp;</paramtype></parameter><parameter name="a"><paramtype>const <classname>regular</classname>&lt; RealType, Transform &gt; &amp;</paramtype></parameter></function>
<function name="operator&lt;&lt;"><type>std::ostream &amp;</type><template>
          <template-type-parameter name="RealType"/>
        </template><parameter name="os"><paramtype>std::ostream &amp;</paramtype></parameter><parameter name="a"><paramtype>const <classname>regular</classname>&lt; RealType, axis::transform::pow &gt; &amp;</paramtype></parameter></function>
<function name="operator&lt;&lt;"><type>std::ostream &amp;</type><template>
          <template-type-parameter name="RealType"/>
        </template><parameter name="os"><paramtype>std::ostream &amp;</paramtype></parameter><parameter name="a"><paramtype>const <classname>circular</classname>&lt; RealType &gt; &amp;</paramtype></parameter></function>
<function name="operator&lt;&lt;"><type>std::ostream &amp;</type><template>
          <template-type-parameter name="RealType"/>
        </template><parameter name="os"><paramtype>std::ostream &amp;</paramtype></parameter><parameter name="a"><paramtype>const <classname>variable</classname>&lt; RealType &gt; &amp;</paramtype></parameter></function>
<function name="operator&lt;&lt;"><type>std::ostream &amp;</type><template>
          <template-type-parameter name="IntType"/>
        </template><parameter name="os"><paramtype>std::ostream &amp;</paramtype></parameter><parameter name="a"><paramtype>const <classname>integer</classname>&lt; IntType &gt; &amp;</paramtype></parameter></function>
<function name="operator&lt;&lt;"><type>std::ostream &amp;</type><template>
          <template-type-parameter name="T"/>
        </template><parameter name="os"><paramtype>std::ostream &amp;</paramtype></parameter><parameter name="a"><paramtype>const <classname>category</classname>&lt; T &gt; &amp;</paramtype></parameter></function>
<function name="operator&lt;&lt;"><type>std::ostream &amp;</type><template>
        </template><parameter name="os"><paramtype>std::ostream &amp;</paramtype></parameter><parameter name="a"><paramtype>const <classname>category</classname>&lt; std::string &gt; &amp;</paramtype></parameter></function>
</namespace>




















</namespace>
</namespace>
</header>
<header name="boost/histogram/serialization.hpp">
<para>Defines the serialization functions, to use with boost.serialize. </para><namespace name="boost">
<namespace name="histogram">
<namespace name="axis">
<namespace name="transform">
</namespace>















</namespace>















<function name="serialize"><type>void</type><template>
          <template-type-parameter name="Archive"/>
          <template-type-parameter name="Container"/>
        </template><parameter name="ar"><paramtype>Archive &amp;</paramtype></parameter><parameter name="store"><paramtype>array_storage&lt; Container &gt; &amp;</paramtype></parameter><parameter name=""><paramtype>unsigned</paramtype></parameter></function>




</namespace>
</namespace>
</header>
<header name="boost/histogram/static_histogram.hpp">
<namespace name="boost">
<namespace name="histogram">
















<function name="make_static_histogram"><type>static_histogram&lt; mpl::vector&lt; Axis... &gt; &gt;</type><template>
          <template-nontype-parameter name="Axis"><type>typename...</type></template-nontype-parameter>
        </template><parameter name="axis"><paramtype>Axis &amp;&amp;...</paramtype></parameter><purpose>default static type factory </purpose></function>
<function name="make_static_histogram_with"><type>static_histogram&lt; mpl::vector&lt; Axis... &gt;, Storage &gt;</type><template>
          <template-type-parameter name="Storage"/>
          <template-nontype-parameter name="Axis"><type>typename...</type></template-nontype-parameter>
        </template><parameter name="axis"><paramtype>Axis &amp;&amp;...</paramtype></parameter><purpose>static type factory with variable storage type </purpose></function>


</namespace>
<namespace name="serialization">
</namespace>
</namespace>
</header>
<header name="boost/histogram/storage/adaptive_storage.hpp">
<namespace name="boost">
<namespace name="histogram">
<class name="adaptive_storage"><typedef name="value_type"><type>double</type></typedef>
<method-group name="public member functions">
<method name="size" cv="const"><type>std::size_t</type></method>
<method name="increase"><type>void</type><parameter name="i"><paramtype>std::size_t</paramtype></parameter></method>
<method name="add"><type>void</type><template>
          <template-type-parameter name="T"/>
        </template><parameter name="i"><paramtype>std::size_t</paramtype></parameter><parameter name="value"><paramtype>const T &amp;</paramtype></parameter></method>
<method name="add"><type>void</type><template>
          <template-type-parameter name="T"/>
        </template><parameter name="i"><paramtype>std::size_t</paramtype></parameter><parameter name="value"><paramtype>const T &amp;</paramtype></parameter><parameter name="variance"><paramtype>const T &amp;</paramtype></parameter></method>
<method name="weighted_increase"><type>void</type><parameter name="i"><paramtype>std::size_t</paramtype></parameter><parameter name="weight_counter"><paramtype>const double</paramtype></parameter></method>
<method name="value" cv="const"><type>value_type</type><parameter name="i"><paramtype>std::size_t</paramtype></parameter></method>
<method name="variance" cv="const"><type>value_type</type><parameter name="i"><paramtype>std::size_t</paramtype></parameter></method>
<method name="operator==" cv="const"><type>bool</type><parameter name="rhs"><paramtype>const adaptive_storage &amp;</paramtype></parameter></method>
<method name="operator+="><type>adaptive_storage &amp;</type><parameter name="rhs"><paramtype>const adaptive_storage &amp;</paramtype></parameter></method>
<method name="operator+="><type>adaptive_storage &amp;</type><template>
          <template-type-parameter name="RHS"/>
          <template-type-parameter name=""><default>detail::is_storage&lt;RHS&gt;</default></template-type-parameter>
        </template><parameter name="rhs"><paramtype>const RHS &amp;</paramtype></parameter></method>
<method name="operator*="><type>adaptive_storage &amp;</type><parameter name="x"><paramtype>const value_type</paramtype></parameter></method>
</method-group>
<constructor specifiers="explicit"><parameter name="s"><paramtype>std::size_t</paramtype></parameter></constructor>
<constructor cv="= default"/>
<constructor cv="= default"><parameter name=""><paramtype>const adaptive_storage &amp;</paramtype></parameter></constructor>
<copy-assignment cv="= default"><type>adaptive_storage &amp;</type><parameter name=""><paramtype>const adaptive_storage &amp;</paramtype></parameter></copy-assignment>
<constructor cv="= default"><parameter name=""><paramtype>adaptive_storage &amp;&amp;</paramtype></parameter></constructor>
<copy-assignment cv="= default"><type>adaptive_storage &amp;</type><parameter name=""><paramtype>adaptive_storage &amp;&amp;</paramtype></parameter></copy-assignment>
<constructor specifiers="explicit"><template>
          <template-type-parameter name="RHS"/>
          <template-type-parameter name=""><default>detail::is_storage&lt;RHS&gt;</default></template-type-parameter>
        </template><parameter name="rhs"><paramtype>const RHS &amp;</paramtype></parameter></constructor>
<copy-assignment><type>adaptive_storage &amp;</type><template>
          <template-type-parameter name="RHS"/>
        </template><parameter name="rhs"><paramtype>const RHS &amp;</paramtype></parameter></copy-assignment>
<method-group name="private member functions">
<method name="serialize"><type>void</type><template>
          <template-type-parameter name="Archive"/>
        </template><parameter name=""><paramtype>Archive &amp;</paramtype></parameter><parameter name=""><paramtype>unsigned</paramtype></parameter></method>
</method-group>
</class>



















</namespace>
<namespace name="python">
</namespace>
<namespace name="serialization">
</namespace>
</namespace>
</header>
<header name="boost/histogram/storage/array_storage.hpp">
<namespace name="boost">
<namespace name="histogram">
<class name="array_storage"><template>
      <template-type-parameter name="T"/>
    </template><typedef name="value_type"><type>T</type></typedef>
<method-group name="public member functions">
<method name="size" cv="const noexcept"><type>std::size_t</type></method>
<method name="increase" cv="noexcept"><type>void</type><parameter name="i"><paramtype>std::size_t</paramtype></parameter></method>
<method name="add" cv="noexcept"><type>void</type><parameter name="i"><paramtype>std::size_t</paramtype></parameter><parameter name="n"><paramtype>const value_type &amp;</paramtype></parameter></method>
<method name="value" cv="const noexcept"><type>value_type</type><parameter name="i"><paramtype>std::size_t</paramtype></parameter></method>
<method name="operator+=" cv="noexcept"><type>array_storage &amp;</type><template>
          <template-type-parameter name="U"/>
        </template><parameter name="rhs"><paramtype>const array_storage&lt; U &gt; &amp;</paramtype></parameter></method>
<method name="operator*=" cv="noexcept"><type>array_storage &amp;</type><parameter name="x"><paramtype>const value_type</paramtype></parameter></method>
</method-group>
<constructor specifiers="explicit"><parameter name="s"><paramtype>std::size_t</paramtype></parameter></constructor>
<constructor cv="= default"/>
<constructor><parameter name="other"><paramtype>const array_storage &amp;</paramtype></parameter></constructor>
<copy-assignment><type>array_storage &amp;</type><parameter name="other"><paramtype>const array_storage &amp;</paramtype></parameter></copy-assignment>
<constructor><parameter name="other"><paramtype>array_storage &amp;&amp;</paramtype></parameter></constructor>
<copy-assignment><type>array_storage &amp;</type><parameter name="other"><paramtype>array_storage &amp;&amp;</paramtype></parameter></copy-assignment>
<constructor specifiers="explicit"><template>
          <template-type-parameter name="S"/>
          <template-type-parameter name=""><default>detail::is_storage&lt;S&gt;</default></template-type-parameter>
        </template><parameter name="other"><paramtype>const S &amp;</paramtype></parameter></constructor>
<copy-assignment><type>array_storage &amp;</type><template>
          <template-type-parameter name="S"/>
        </template><parameter name="other"><paramtype>const S &amp;</paramtype></parameter></copy-assignment>
<method-group name="private member functions">
<method name="reset"><type>void</type><parameter name="size"><paramtype>std::size_t</paramtype></parameter></method>
<method name="init"><type>void</type><parameter name="size"><paramtype>std::size_t</paramtype></parameter></method>
<method name="serialize"><type>void</type><template>
          <template-type-parameter name="Archive"/>
        </template><parameter name=""><paramtype>Archive &amp;</paramtype></parameter><parameter name=""><paramtype>unsigned</paramtype></parameter></method>
</method-group>
</class>



















</namespace>
<namespace name="serialization">
</namespace>
</namespace>
</header>
<header name="boost/histogram/storage/operators.hpp">
<namespace name="boost">
<namespace name="histogram">


















<function name="operator=="><type>bool</type><template>
          <template-type-parameter name="S1"/>
          <template-type-parameter name="S2"/>
          <template-type-parameter name=""><default>detail::is_storage&lt;S1&gt;</default></template-type-parameter>
          <template-type-parameter name=""><default>detail::is_storage&lt;S2&gt;</default></template-type-parameter>
        </template><parameter name="s1"><paramtype>const S1 &amp;</paramtype></parameter><parameter name="s2"><paramtype>const S2 &amp;</paramtype></parameter></function>
<function name="operator!="><type>bool</type><template>
          <template-type-parameter name="S1"/>
          <template-type-parameter name="S2"/>
          <template-type-parameter name=""><default>detail::is_storage&lt;S1&gt;</default></template-type-parameter>
          <template-type-parameter name=""><default>detail::is_storage&lt;S2&gt;</default></template-type-parameter>
        </template><parameter name="s1"><paramtype>const S1 &amp;</paramtype></parameter><parameter name="s2"><paramtype>const S2 &amp;</paramtype></parameter></function>
</namespace>
</namespace>
</header>
</library-reference>